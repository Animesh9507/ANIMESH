import java.sql.*;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

public class BloodDonationPlatform extends Application {

    // Database connection class
    public static class DBConnection {
        private static final String URL = "jdbc:mysql://localhost:3306/blood_donation";
        private static final String USER = "root"; // Replace with your MySQL username
        private static final String PASSWORD = "password"; // Replace with your MySQL password

        public static Connection getConnection() {
            Connection connection = null;
            try {
                connection = DriverManager.getConnection(URL, USER, PASSWORD);
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return connection;
        }
    }

    // User entity class
    public static class User {
        private int id;
        private String name;
        private String email;
        private String password;
        private String role; // 'donor' or 'seeker'
        private String bloodType;
        private String location;
        private boolean availability;

        // Getters and Setters
        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public String getBloodType() {
            return bloodType;
        }

        public void setBloodType(String bloodType) {
            this.bloodType = bloodType;
        }

        public String getLocation() {
            return location;
        }

        public void setLocation(String location) {
            this.location = location;
        }

        public boolean isAvailability() {
            return availability;
        }

        public void setAvailability(boolean availability) {
            this.availability = availability;
        }
    }

    // User Data Access Object (DAO) class
    public static class UserDAO {
        public void addUser(User user) throws SQLException {
            String sql = "INSERT INTO users (name, email, password, role, blood_type, location, availability) VALUES (?, ?, ?, ?, ?, ?, ?)";

            try (Connection conn = DBConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setString(1, user.getName());
                pstmt.setString(2, user.getEmail());
                pstmt.setString(3, user.getPassword());
                pstmt.setString(4, user.getRole());
                pstmt.setString(5, user.getBloodType());
                pstmt.setString(6, user.getLocation());
                pstmt.setBoolean(7, user.isAvailability());

                pstmt.executeUpdate();
            }
        }

        public User getUserByEmail(String email) throws SQLException {
            String sql = "SELECT * FROM users WHERE email = ?";
            User user = null;

            try (Connection conn = DBConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setString(1, email);
                ResultSet rs = pstmt.executeQuery();

                if (rs.next()) {
                    user = new User();
                    user.setId(rs.getInt("id"));
                    user.setName(rs.getString("name"));
                    user.setEmail(rs.getString("email"));
                    user.setPassword(rs.getString("password"));
                    user.setRole(rs.getString("role"));
                    user.setBloodType(rs.getString("blood_type"));
                    user.setLocation(rs.getString("location"));
                    user.setAvailability(rs.getBoolean("availability"));
                }
            }

            return user;
        }
    }

    // Register Form class
    public static class RegisterForm {
        public static void display() {
            Stage window = new Stage();
            window.initModality(Modality.APPLICATION_MODAL);
            window.setTitle("Register");
            window.setMinWidth(300);

            GridPane grid = new GridPane();
            grid.setPadding(new Insets(10, 10, 10, 10));
            grid.setVgap(8);
            grid.setHgap(10);

            Label nameLabel = new Label("Name:");
            GridPane.setConstraints(nameLabel, 0, 0);
            TextField nameInput = new TextField();
            GridPane.setConstraints(nameInput, 1, 0);

            Label emailLabel = new Label("Email:");
            GridPane.setConstraints(emailLabel, 0, 1);
            TextField emailInput = new TextField();
            GridPane.setConstraints(emailInput, 1, 1);

            Label passwordLabel = new Label("Password:");
            GridPane.setConstraints(passwordLabel, 0, 2);
            PasswordField passwordInput = new PasswordField();
            GridPane.setConstraints(passwordInput, 1, 2);

            Button registerButton = new Button("Register");
            registerButton.setOnAction(e -> {
                UserDAO userDAO = new UserDAO();
                User user = new User();
                user.setName(nameInput.getText());
                user.setEmail(emailInput.getText());
                user.setPassword(passwordInput.getText());
                user.setRole("donor"); // Example role, you can modify as needed

                try {
                    userDAO.addUser(user);
                    System.out.println("User registered: " + nameInput.getText());
                    window.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            });
            GridPane.setConstraints(registerButton, 1, 3);

            grid.getChildren().addAll(nameLabel, nameInput, emailLabel, emailInput, passwordLabel, passwordInput, registerButton);

            Scene scene = new Scene(grid);
            window.setScene(scene);
            window.showAndWait();
        }
    }

    // Login Form class
    public static class LoginForm {
        public static void display() {
            Stage window = new Stage();
            window.initModality(Modality.APPLICATION_MODAL);
            window.setTitle("Login");
            window.setMinWidth(300);

            GridPane grid = new GridPane();
            grid.setPadding(new Insets(10, 10, 10, 10));
            grid.setVgap(8);
            grid.setHgap(10);

            Label emailLabel = new Label("Email:");
            GridPane.setConstraints(emailLabel, 0, 0);
            TextField emailInput = new TextField();
            GridPane.setConstraints(emailInput, 1, 0);

            Label passwordLabel = new Label("Password:");
            GridPane.setConstraints(passwordLabel, 0, 1);
            PasswordField passwordInput = new PasswordField();
            GridPane.setConstraints(passwordInput, 1, 1);

            Button loginButton = new Button("Login");
            loginButton.setOnAction(e -> {
                UserDAO userDAO = new UserDAO();
                try {
                    User user = userDAO.getUserByEmail(emailInput.getText());
                    if (user != null && user.getPassword().equals(passwordInput.getText())) {
                        System.out.println("User logged in: " + emailInput.getText());
                        window.close();
                    } else {
                        System.out.println("Invalid email or password");
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            });
            GridPane.setConstraints(loginButton, 1, 2);

            grid.getChildren().addAll(emailLabel, emailInput, passwordLabel, passwordInput, loginButton);

            Scene scene = new Scene(grid);
            window.setScene(scene);
            window.showAndWait();
        }
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Blood Donation Platform");

        Button registerButton = new Button("Register");
        registerButton.setOnAction(e -> {
            RegisterForm.display();
        });

        Button loginButton = new Button("Login");
        loginButton.setOnAction(e -> {
            LoginForm.display();
        });

        VBox layout = new VBox(10);
        layout.getChildren().addAll(registerButton, loginButton);

        Scene scene = new Scene(layout, 300, 250);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
